---
- name: Provision & Deploy (single block)
  hosts: all
  gather_facts: false
  become: true
  vars:
    vps_user: django
    project_name: education-website
    project_root: /home/{{ vps_user }}/{{ project_name }}
    git_repo: "https://github.com/AlphaOneLabs/education-website.git"
    git_branch: "main"
    domain_name: "www1.alphaonelabs.com"
    app_port: 8000
    pkgs:
      - python3
      - python3-venv
      - python3-pip
      - git
      - nginx
      - postgresql
      - postgresql-contrib
      - libpq-dev
      - redis-server
      - ufw
  tasks:
    - name: Install base packages (non-interactive, synchronous)
      apt:
        name: "{{ pkgs }}"
        state: present
        update_cache: yes
        cache_valid_time: 3600
      environment: {DEBIAN_FRONTEND: noninteractive}

    - name: Ensure application user exists
      user: { name: "{{ vps_user }}", system: true, create_home: true, shell: /bin/bash }

    - name: Read local .env.production
      set_fact:
        env_prod_content: "{{ lookup('ansible.builtin.file', '../.env.production') }}"

    - name: Extract DATABASE_URL
      set_fact:
        database_url_line: "{{ env_prod_content.split('\n') | select('match','^DATABASE_URL=postgres://') | list | first | default('') }}"
      when: env_prod_content is defined

    - name: Fail if DATABASE_URL is missing
      fail:
        msg: "DATABASE_URL not found in .env.production; cannot provision database."
      when: database_url_line | length == 0

    - name: Parse DATABASE_URL components
      set_fact:
        db_user: "{{ database_url_line | regex_replace('^DATABASE_URL=postgres://([^:]+):.*$','\\1') }}"
        db_password: "{{ database_url_line | regex_replace('^DATABASE_URL=postgres://[^:]+:([^@]+)@.*$','\\1') }}"
        db_name: "{{ database_url_line | regex_replace('^DATABASE_URL=postgres://[^/]+/([^\\n]+)$','\\1') }}"
      when: database_url_line | length > 0

    - name: Show parsed DB values
      debug:
        msg: "Using DATABASE_URL user={{ db_user }}, db={{ db_name }}"

    - name: Ensure PostgreSQL service is started and enabled
      service:
        name: postgresql
        state: started
        enabled: yes

    - name: Prepare escaped PostgreSQL password
      set_fact:
        db_password_escaped: >-
          {{ db_password | replace("'", "''") }}

    - name: Ensure PostgreSQL role exists
      become: yes
      become_user: postgres
      shell: |
        ROLE_EXISTS=$(psql -tAc "SELECT 1 FROM pg_roles WHERE rolname='{{ db_user }}'")
        if [ -z "$ROLE_EXISTS" ]; then
          psql -c "CREATE ROLE \"{{ db_user }}\" LOGIN PASSWORD '{{ db_password_escaped }}';"
        fi
      args:
        executable: /bin/bash
      when: db_user is defined and db_user != ''

    - name: Ensure PostgreSQL database exists
      become: yes
      become_user: postgres
      shell: |
        DB_EXISTS=$(psql -tAc "SELECT 1 FROM pg_database WHERE datname='{{ db_name }}'")
        if [ -z "$DB_EXISTS" ]; then
          createdb -O "{{ db_user }}" "{{ db_name }}"
        fi
      args:
        executable: /bin/bash

    - name: Ensure application role owns and can use public schema
      become: yes
      become_user: postgres
      shell: |
        psql -d "{{ db_name }}" -c "ALTER SCHEMA public OWNER TO \"{{ db_user }}\";" || true
        psql -d "{{ db_name }}" -c "GRANT ALL ON SCHEMA public TO \"{{ db_user }}\";" || true
        psql -d "{{ db_name }}" -c "GRANT CREATE ON SCHEMA public TO \"{{ db_user }}\";" || true
      args:
        executable: /bin/bash
      when: db_user is defined and db_user != ''

    - name: Clone code
      become: yes
      become_user: "{{ vps_user }}"
      git:
        repo: "{{ git_repo }}"
        dest: "{{ project_root }}"
        version: "{{ git_branch }}"
        force: yes
      register: git_clone

    - name: Ensure correct ownership of project directory
      file:
        path: "{{ project_root }}"
        state: directory
        recurse: yes
        owner: "{{ vps_user }}"
        group: "{{ vps_user }}"
      when: git_clone is changed

    - name: Discover candidate JSON files at repo root (controller)
      set_fact:
        service_account_candidates: "{{ lookup('ansible.builtin.fileglob','../*.json', wantlist=True) }}"
      no_log: true

    - name: Identify Google service account JSON (first file containing 'service_account')
      set_fact:
        service_account_file: "{{ item }}"
      loop: "{{ service_account_candidates | default([]) }}"
      when: >-
        ('service_account' in lookup('ansible.builtin.file', item)) and
        (service_account_file is not defined)
      no_log: true

    - name: Fail if service account JSON not found
      fail:
        msg: "No service_account JSON file found in project root."
      when: service_account_file is not defined

    - name: Copy Google service account file dynamically
      copy:
        src: "{{ service_account_file }}"
        dest: "{{ project_root }}/{{ service_account_file | basename }}"
        mode: '0600'
        owner: "{{ vps_user }}"
        group: "{{ vps_user }}"
      no_log: true

    - name: Create venv + install deps (uses system default python3)
      become: yes
      become_user: "{{ vps_user }}"
      shell: |
        python3 -m venv venv
        source venv/bin/activate
        pip install --upgrade pip wheel
        pip install -r requirements.txt uvicorn gunicorn psycopg2-binary
      args:
        chdir: "{{ project_root }}"
        executable: /bin/bash

    - name: Copy .env.production to server as .env
      copy:
        src: ../.env.production
        dest: "{{ project_root }}/.env"
        mode: '0600'
        owner: "{{ vps_user }}"
        group: "{{ vps_user }}"

    - name: Django migrate + collectstatic
      become: yes
      become_user: "{{ vps_user }}"
      shell: |
        set -e
        source venv/bin/activate
        export DJANGO_SETTINGS_MODULE=web.settings
        python manage.py migrate --noinput
        python manage.py collectstatic --noinput
      args:
        chdir: "{{ project_root }}"
        executable: /bin/bash

    - name: Ensure user home is accessible to nginx (execute bit)
      file:
        path: "/home/{{ vps_user }}"
        mode: '0755'
        state: directory

    - name: Ensure staticfiles directory readable
      file:
        path: "{{ project_root }}/staticfiles"
        mode: '0755'
        state: directory

    - name: Configure nginx
      template:
        src: nginx-http.conf.j2
        dest: /etc/nginx/nginx.conf
      notify: restart nginx

    - name: Copy systemd service
      template:
        src: education-website.service.j2
        dest: /etc/systemd/system/education-website.service
      notify: restart app

    - name: Ensure application service enabled and started
      systemd:
        name: education-website
        enabled: true
        state: started
        daemon_reload: true

    - name: Allow ports
      community.general.ufw:
        rule: allow
        port: "{{ item }}"
      loop: [22, 80, 443]

    - name: Enable firewall (now that everything is ready)
      community.general.ufw:
        state: enabled

    - name: Ensure Redis service is enabled and running
      service:
        name: redis-server
        state: started
        enabled: yes

    - name: Ensure logs directory exists
      file:
        path: "{{ project_root }}/logs"
        state: directory
        owner: "{{ vps_user }}"
        group: "{{ vps_user }}"
        mode: '0755'

    - name: Deploy crontab file
      copy:
        src: ../crontab
        dest: "{{ project_root }}/deploy.crontab"
        owner: "{{ vps_user }}"
        group: "{{ vps_user }}"
        mode: '0644'

    - name: Install crontab for application user
      become: yes
      become_user: "{{ vps_user }}"
      shell: crontab {{ project_root }}/deploy.crontab
      register: install_cron
      changed_when: install_cron.stdout != '' or install_cron.stderr != ''

  handlers:
    - name: restart nginx
      service: {name: nginx, state: restarted, enabled: yes}
    - name: restart app
      service: {name: education-website, state: restarted, enabled: yes}
